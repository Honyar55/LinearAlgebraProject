import 'package:flutter/material.dart';
import 'dart:math';

void main() => runApp(LinearEquationSolverApp());

class LinearEquationSolverApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Linear Equation Solver',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: SolverHomePage(),
    );
  }
}

class SolverHomePage extends StatefulWidget {
  @override
  _SolverHomePageState createState() => _SolverHomePageState();
}

class _SolverHomePageState extends State<SolverHomePage> {
  
  
   // Add these controllers
  final TextEditingController matrix2Controller = TextEditingController();
  final TextEditingController scalarController = TextEditingController();
  
  // Add this to your existing selectedMethod variable
  String selectedMethod = 'Gauss-Jordan'; // Update the initial value to include new operations:
  final List<String> methods = [
    'Gauss-Jordan',
    'Cramer\'s Rule',
    'Matrix Addition',
    'Matrix Subtraction',
    'Matrix Multiplication',
    'Scalar Multiplication',
    'Transpose',
    'Determinant',
    'Inverse',
    'Eigenvalues'
  ];

  // Update the solve method to include new operations
  void solve() {
    try {
      List<List<double>> matrix1 = matrixController.text
          .trim()
          .split('\n')
          .map((row) => row.split(' ').map(double.parse).toList())
          .toList();

      EquationSolver solver = EquationSolver();
      String methodSteps = '';

      switch (selectedMethod) {
        case 'Matrix Addition':
        case 'Matrix Subtraction':
        case 'Matrix Multiplication':
          List<List<double>> matrix2 = matrix2Controller.text
              .trim()
              .split('\n')
              .map((row) => row.split(' ').map(double.parse).toList())
              .toList();

          List<List<double>> resultMatrix;
          if (selectedMethod == 'Matrix Addition') {
            resultMatrix = solver.matrixAddition(matrix1, matrix2);
          } else if (selectedMethod == 'Matrix Subtraction') {
            resultMatrix = solver.matrixSubtraction(matrix1, matrix2);
          } else {
            resultMatrix = solver.matrixMultiplication(matrix1, matrix2);
          }
          setState(() {
            result = 'Result Matrix:\n${_formatMatrix(resultMatrix)}';
          });
          break;

        case 'Scalar Multiplication':
          double scalar = double.parse(scalarController.text);
          List<List<double>> resultMatrix = solver.scalarMultiplication(matrix1, scalar);
          setState(() {
            result = 'Result Matrix:\n${_formatMatrix(resultMatrix)}';
          });
          break;

        case 'Transpose':
          List<List<double>> resultMatrix = solver.transpose(matrix1);
          setState(() {
            result = 'Transposed Matrix:\n${_formatMatrix(resultMatrix)}';
          });
          break;

        case 'Determinant':
          double det = solver.calculateDeterminant(matrix1);
          setState(() {
            result = 'Determinant: ${det.toStringAsFixed(4)}';
          });
          break;

        case 'Inverse':
          List<List<double>>? resultMatrix = solver.calculateInverse(matrix1);
          setState(() {
            result = resultMatrix != null
                ? 'Inverse Matrix:\n${_formatMatrix(resultMatrix)}'
                : 'Matrix is not invertible';
          });
          break;

        case 'Eigenvalues':
          Map<String, dynamic> eigenResult = solver.calculateDominantEigenvalue(matrix1);
          setState(() {
            result = 'Dominant Eigenvalue: ${eigenResult['eigenvalue'].toStringAsFixed(4)}\n'
                'Corresponding Eigenvector:\n${eigenResult['eigenvector'].map((v) => v.toStringAsFixed(4)).join('\n')}';
          });
          break;

        // Keep existing cases for Gauss-Jordan and Cramer's Rule
        default:
          // Your existing Gauss-Jordan and Cramer's Rule code
      }
    } catch (e) {
      setState(() {
        result = 'Error: ${e.toString()}';
        steps = '';
      });
    }
  }

  // Add this helper method if not already present
  String _formatMatrix(List<List<double>> matrix) {
    return matrix
        .map((row) => row.map((v) => v.toStringAsFixed(2)).join(' '))
        .join('\n');
  }

  // Update the build method to include new UI elements
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // ... existing AppBar ...
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Enter the first matrix (rows separated by newlines):'),
              TextField(
                controller: matrixController,
                decoration: InputDecoration(
                  border: OutlineInputBorder(),
                  hintText: '2 1 -1\n-3 -1 2\n-2 1 2',
                ),
                maxLines: 3,
              ),
              SizedBox(height: 16),
              
              if (['Matrix Addition', 'Matrix Subtraction', 'Matrix Multiplication']
                  .contains(selectedMethod))
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('Enter the second matrix:'),
                    TextField(
                      controller: matrix2Controller,
                      decoration: InputDecoration(
                        border: OutlineInputBorder(),
                        hintText: '2 1 -1\n-3 -1 2\n-2 1 2',
                      ),
                      maxLines: 3,
                    ),
                    SizedBox(height: 16),
                  ],
                ),

              if (selectedMethod == 'Scalar Multiplication')
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('Enter the scalar value:'),
                    TextField(
                      controller: scalarController,
                      decoration: InputDecoration(
                        border: OutlineInputBorder(),
                        hintText: '2.5',
                      ),
                    ),
                    SizedBox(height: 16),
                  ],
                ),

              Wrap(
                spacing: 8.0,
                runSpacing: 8.0,
                children: methods.map((method) => ElevatedButton(
                  onPressed: () {
                    setState(() {
                      selectedMethod = method;
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: selectedMethod == method
                        ? Colors.blue
                        : Colors.grey,
                  ),
                  child: Text(method),
                )).toList(),
              ),

              SizedBox(height: 16),
              ElevatedButton(
                onPressed: solve,
                child: Text('Solve'),
              ),
              SizedBox(height: 16),
              Text('Result:', style: TextStyle(fontWeight: FontWeight.bold)),
              Text(result),
              SizedBox(height: 16),
              Text(steps),
            ],
          ),
        ),
      ),
    );
  }
  
  
  
  final TextEditingController matrixController = TextEditingController();
  final TextEditingController vectorController = TextEditingController();
  String result = '';
  String steps = '';
  String selectedMethod1 = 'Gauss-Jordan';

  void solve1() {
    try {
      List<List<double>> matrix = matrixController.text
          .trim()
          .split('\n')
          .map((row) => row.split(' ').map(double.parse).toList())
          .toList();
      List<double> vector = vectorController.text
          .trim()
          .split(' ')
          .map(double.parse)
          .toList();

      if (matrix.length != vector.length) {
        setState(() {
          result = 'Error: Matrix and vector dimensions do not match.';
          steps = '';
        });
        return;
      }

      if (matrix.any((row) => row.length != matrix.length)) {
        setState(() {
          result = 'Error: Matrix must be square (same number of rows and columns).';
          steps = '';
        });
        return;
      }

      EquationSolver solver = EquationSolver();
      String methodSteps = '';

      List<double>? methodResult;

      if (selectedMethod == 'Gauss-Jordan') {
        methodResult = solver.gaussJordan(
          List.generate(matrix.length, (i) => List.from(matrix[i])),
          List.from(vector),
          stepRecorder: (step) => methodSteps += '$step\n\n',
        );
      } else if (selectedMethod == 'Cramer\'s Rule') {
        methodResult = solver.cramersRule(
          matrix,
          vector,
          stepRecorder: (step) => methodSteps += '$step\n\n',
        );
      }

      setState(() {
        result = '$selectedMethod Solution: ${methodResult?.map((v) => v.toStringAsFixed(2)).toList() ?? "No Solution"}';
        steps = 'Steps for $selectedMethod:\n\n$methodSteps';
      });
    } catch (e) {
      setState(() {
        result = 'Error: Invalid input. Ensure the format is correct.';
        steps = '';
      });
    }
  }

  void showInfoDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('About This App'),
        content: Text(
          'This app was created by Ayman, Sahand, and HoanyarAra for a Linear Algebra assignment.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('Close'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build1(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Linear Equation Solver'),
        actions: [
          IconButton(
            icon: Icon(Icons.info_outline),
            onPressed: showInfoDialog,
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Enter the matrix (rows separated by newlines):'),
            TextField(
              controller: matrixController,
              decoration: InputDecoration(
                  border: OutlineInputBorder(),
                  hintText: 'e.g., 2 1 -1\n-3 -1 2\n-2 1 2'),
              maxLines: 3,
            ),
            SizedBox(height: 16),
            Text('Enter the vector (space-separated):'),
            TextField(
              controller: vectorController,
              decoration: InputDecoration(
                  border: OutlineInputBorder(), hintText: 'e.g., 8 -11 -3'),
            ),
            SizedBox(height: 16),
            Row(
              children: [
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      selectedMethod = 'Gauss-Jordan';
                    });
                  },
                  child: Text('Gauss-Jordan'),
                ),
                SizedBox(width: 10),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      selectedMethod = 'Cramer\'s Rule';
                    });
                  },
                  child: Text('Cramer\'s Rule'),
                ),
              ],
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: solve,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue, // Set the button color to blue
              ),
              child: Text('Solve'),
            ),
            SizedBox(height: 16),
            Text(
              'Result:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            Text(result),
            SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                child: Text(
                  steps,
                  style: TextStyle(fontFamily: 'monospace'),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class EquationSolver {
  /// Gauss-Jordan Method with detailed steps
  List<double>? gaussJordan(List<List<double>> matrix, List<double> vector,
      {required void Function(String step) stepRecorder}) {
    int n = matrix.length;

    for (int i = 0; i < n; i++) {
      // Pivot normalization
      double pivot = matrix[i][i];
      if (pivot == 0) return null; // No solution

      for (int k = 0; k < n; k++) {
        matrix[i][k] /= pivot;
      }
      vector[i] /= pivot;

      stepRecorder(
          'Step: Normalized row ${i + 1} (divided by pivot ${pivot.toStringAsFixed(2)}):\n'
          'Matrix:\n${_formatMatrix(matrix)}\n'
          'Vector: ${vector.map((v) => v.toStringAsFixed(2)).toList()}');

      for (int j = 0; j < n; j++) {
        if (i != j) {
          double ratio = matrix[j][i];
          for (int k = 0; k < n; k++) {
            matrix[j][k] -= ratio * matrix[i][k];
          }
          vector[j] -= ratio * vector[i];

          stepRecorder(
              'Step: Eliminated row ${j + 1} using row ${i + 1} (multiplier ${ratio.toStringAsFixed(2)}):\n'
              'Matrix:\n${_formatMatrix(matrix)}\n'
              'Vector: ${vector.map((v) => v.toStringAsFixed(2)).toList()}');
        }
      }
    }

    return vector;
  }

  /// Cramer's Rule with detailed steps
  List<double>? cramersRule(List<List<double>> matrix, List<double> vector,
      {required void Function(String step) stepRecorder}) {
    double determinant(List<List<double>> mat) {
      if (mat.length == 1) return mat[0][0];
      if (mat.length == 2) {
        return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];
      }
      double det = 0;
      for (int p = 0; p < mat[0].length; p++) {
        List<List<double>> subMatrix = mat
            .skip(1)
            .map((row) =>row
                .asMap()
                .entries
                .where((entry) => entry.key != p)
                .map((entry) => entry.value)
                .toList())
            .toList();
        det += mat[0][p] *
            determinant(subMatrix) *
            ((p % 2 == 0) ? 1 : -1);
      }
      return det;
    }

    double detMain = determinant(matrix);
    if (detMain == 0) {
      stepRecorder('Determinant of the main matrix is 0. No unique solution exists.');
      return null;
    }

    List<double> solutions = [];
    for (int i = 0; i < matrix.length; i++) {
      List<List<double>> modifiedMatrix = List.generate(
          matrix.length,
          (row) => List.from(matrix[row])
            ..[i] = vector[row]);

      double detModified = determinant(modifiedMatrix);
      solutions.add(detModified / detMain);

      stepRecorder(
          'Step: Determinant of modified matrix with column ${i + 1} replaced:\n'
          'Modified Matrix:\n${_formatMatrix(modifiedMatrix)}\n'
          'Determinant: ${detModified.toStringAsFixed(2)}\n'
          'Solution for variable ${i + 1}: ${solutions[i].toStringAsFixed(2)}');
    }

    return solutions;
  }

  String _formatMatrix(List<List<double>> matrix) {
    return matrix.map((row) => row.map((v) => v.toStringAsFixed(2)).join(' ')).join('\n');
  }
 List<List<double>> matrixAddition(List<List<double>> matrix1, List<List<double>> matrix2) {
    if (matrix1.length != matrix2.length || matrix1[0].length != matrix2[0].length) {
      throw Exception('Matrices must have the same dimensions');
    }

    List<List<double>> result = List.generate(
      matrix1.length,
      (i) => List.generate(
        matrix1[0].length,
        (j) => matrix1[i][j] + matrix2[i][j],
      ),
    );
    return result;
  }

  // Matrix Subtraction
  List<List<double>> matrixSubtraction(List<List<double>> matrix1, List<List<double>> matrix2) {
    if (matrix1.length != matrix2.length || matrix1[0].length != matrix2[0].length) {
      throw Exception('Matrices must have the same dimensions');
    }

    List<List<double>> result = List.generate(
      matrix1.length,
      (i) => List.generate(
        matrix1[0].length,
        (j) => matrix1[i][j] - matrix2[i][j],
      ),
    );
    return result;
  }

  // Matrix Multiplication
  List<List<double>> matrixMultiplication(List<List<double>> matrix1, List<List<double>> matrix2) {
    if (matrix1[0].length != matrix2.length) {
      throw Exception('Number of columns in first matrix must equal number of rows in second matrix');
    }

    List<List<double>> result = List.generate(
      matrix1.length,
      (i) => List.generate(
        matrix2[0].length,
        (j) {
          double sum = 0;
          for (int k = 0; k < matrix1[0].length; k++) {
            sum += matrix1[i][k] * matrix2[k][j];
          }
          return sum;
        },
      ),
    );
    return result;
  }

  // Scalar Multiplication
  List<List<double>> scalarMultiplication(List<List<double>> matrix, double scalar) {
    return List.generate(
      matrix.length,
      (i) => List.generate(
        matrix[0].length,
        (j) => matrix[i][j] * scalar,
      ),
    );
  }

  // Matrix Transposition
  List<List<double>> transpose(List<List<double>> matrix) {
    return List.generate(
      matrix[0].length,
      (i) => List.generate(
        matrix.length,
        (j) => matrix[j][i],
      ),
    );
  }

  // Calculate determinant (recursive method)
  double calculateDeterminant(List<List<double>> matrix) {
    if (matrix.length != matrix[0].length) {
      throw Exception('Matrix must be square');
    }

    int n = matrix.length;
    if (n == 1) return matrix[0][0];
    if (n == 2) return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];

    double det = 0;
    for (int i = 0; i < n; i++) {
      det += matrix[0][i] * cofactor(matrix, 0, i);
    }
    return det;
  }

  // Calculate cofactor
  double cofactor(List<List<double>> matrix, int row, int col) {
    return pow(-1, row + col) * calculateDeterminant(getMinor(matrix, row, col)) as double;
  }

  // Get minor matrix
  List<List<double>> getMinor(List<List<double>> matrix, int row, int col) {
    return List.generate(
      matrix.length - 1,
      (i) => List.generate(
        matrix.length - 1,
        (j) => matrix[i < row ? i : i + 1][j < col ? j : j + 1],
      ),
    );
  }

  // Calculate inverse matrix
  List<List<double>>? calculateInverse(List<List<double>> matrix) {
    double det = calculateDeterminant(matrix);
    if (det == 0) return null;

    int n = matrix.length;
    List<List<double>> adjugate = List.generate(
      n,
      (i) => List.generate(
        n,
        (j) => cofactor(matrix, j, i), // Note: j,i instead of i,j for adjugate
      ),
    );

    return scalarMultiplication(adjugate, 1/det);
  }

  // Calculate eigenvalues (using power iteration method for dominant eigenvalue)
  Map<String, dynamic> calculateDominantEigenvalue(List<List<double>> matrix, {int maxIterations = 100, double tolerance = 1e-10}) {
    if (matrix.length != matrix[0].length) {
      throw Exception('Matrix must be square');
    }

    int n = matrix.length;
    List<double> vector = List.generate(n, (i) => 1.0); // Initial guess
    double eigenvalue = 0;
    List<double> eigenvector = List.from(vector);

    for (int iter = 0; iter < maxIterations; iter++) {
      // Multiply matrix by vector
      List<double> newVector = List.generate(n, (i) {
        double sum = 0;
        for (int j = 0; j < n; j++) {
          sum += matrix[i][j] * vector[j];
        }
        return sum;
      });

      // Calculate largest component
      double maxComponent = 0;
      for (int i = 0; i < n; i++) {
        maxComponent = max(maxComponent.abs(), newVector[i].abs());
      }

      // Normalize vector
      for (int i = 0; i < n; i++) {
        newVector[i] /= maxComponent;
      }

      // Check convergence
      double diff = 0;
      for (int i = 0; i < n; i++) {
        diff += (newVector[i] - vector[i]).abs();
      }

      if (diff < tolerance) {
        // Calculate eigenvalue using Rayleigh quotient
        double numerator = 0;
        double denominator = 0;
        for (int i = 0; i < n; i++) {
          double sum = 0;
          for (int j = 0; j < n; j++) {
            sum += matrix[i][j] * newVector[j];
          }
          numerator += newVector[i] * sum;
          denominator += newVector[i] * newVector[i];
        }
        eigenvalue = numerator / denominator;
        eigenvector = newVector;
        break;
      }

      vector = newVector;
    }

    return {
      'eigenvalue': eigenvalue,
      'eigenvector': eigenvector,
    };
  }}

